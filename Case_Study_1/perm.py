import numpy as np
from itertools import permutations

# Example arrays
array_512 =  np.array([-2.77890753, -3.04819368, -2.55393586, -3.27748752, -2.83002428, -2.53770178 ,   
    -2.7537837,  -2.85167105, -2.97720563, -3.18743964, -2.44674578, -2.08416347,
    -2.50151155, -2.04383133, -0.29777486, -1.87220368,  1.64386323, -2.40373118,
    0.54105684  ,5.23381412,  5.09734127,  6.20600936,  6.46880616,  5.13656665,
    1.36392482 , 1.33050685,  0.41533809, -0.79280072 ,-1.70391084, -1.58258402,
    -1.5297631,  -3.46079733, -2.52178909, -3.39468463 ,-2.23867844, -3.00729829,
    -3.18296601, -2.77861361, -2.52001909, -2.93314726, -2.53036211, -3.21690644,
    -3.6364566,  -4.0847567,  -2.72702562, -2.83108845 ,-3.16870935, -4.02715009,
    -1.11719381, -1.6321762,  -4.00114836, -5.35112814, -0.26287722,  4.26422613,
    7.18171523 , 6.58202293,  6.35251441,  7.83813968,  8.28623434 , 9.32801081,
    5.10701797  ,6.65666523 , 7.54579061,  7.60872019, -2.78626258, -3.05619146,
    -2.56064844 ,-3.28604913 ,-2.83742202, -2.54437057, -2.76098651, -2.85915412,
    -2.98501586 ,-3.19581935 ,-2.45311404 ,-2.08964987, -2.50807476, -2.04925258,
    -0.29851843 ,-1.87713871 , 1.64818171 ,-2.41007338,  0.54245455,  5.24749072,
    5.11073056  ,6.22232793  ,6.48578078  ,5.15010208  ,1.36751449,  1.33399466,
    0.41647357 ,-0.79487371 ,-1.70844165 ,-1.5867305 , -1.53389036, -3.46989831,
    -2.52844201 ,-3.40358303, -2.24452291 ,-3.0151111 , -3.19123412, -2.78591283,
    -2.52658554 ,-2.94091349 ,-2.53697269 ,-3.22539035 ,-3.64605193, -4.09557141,
    -2.7341202  ,-2.83848069 ,-3.17701974 ,-4.03762939, -1.12013825, -1.63642916,
    -4.01160407 ,-5.36518386 ,-0.26355939  ,4.27541129 , 7.20057421,  6.59933065,
    6.36915943  ,7.85870386  ,8.30799211  ,9.3525676  , 5.12044088,  6.67415811,
    7.56553913  ,7.6285149  ,-2.79051585 ,-3.06081611, -2.56453005 ,-3.29099978,
    -2.84169967 ,-2.54822674 ,-2.7651515  ,-2.8634812,  -2.98953208, -3.200665,
    -2.45679632 ,-2.09282233 ,-2.51186998 ,-2.05238756, -0.29894833, -1.87999252,
    1.65067883 ,-2.41374105  ,0.54326268  ,5.25539907,  5.11847354 , 6.2317644,
    6.49559656,  5.15792912  ,1.36959029  ,1.33601159 , 0.41713029 ,-0.79607239,
    -1.71106172, -1.58912806 ,-1.53627736 ,-3.47516096 ,-2.53228915, -3.40872855,
    -2.24790243, -3.01962875 ,-3.19601492 ,-2.79013359, -2.53038248, -2.94540454,
    -2.5407952 , -3.23029634 ,-3.65160048 ,-4.10182542 ,-2.73822246, -2.84275517,
    -3.18182532, -4.04368873 ,-1.12184095 ,-1.63888848, -4.01765019, -5.37331181,
    -0.26395395,  4.28187904 , 7.21147948 , 6.60933892 , 6.37878439,  7.87059477,
    8.32057369  ,9.36676792  ,5.12820278,  6.68427377,  7.57695833,  7.63996096,
    -2.79405426 ,-3.06466327 ,-2.56775923, -3.29511816, -2.84525819, -2.55143458,
    -2.76861637 ,-2.86708093 ,-2.99328909, -3.20469617, -2.45985957, -2.0954614,
    -2.51502723 ,-2.05499552 ,-0.29930595, -1.88236666,  1.6527561,  -2.41679239,
    0.54393484  ,5.26197799  ,5.12491554,  6.23961476,  6.5037625,   5.16444046,
    1.37131721  ,1.33768958  ,0.41767665, -0.79706957 ,-1.7132414,  -1.5911224,
    -1.53826338 ,-3.47953894 ,-2.53548958, -3.41300913, -2.25071386, -3.02338704,
    -3.199992   ,-2.79364482 ,-2.53354113, -2.9491407 , -2.54397515, -3.23437773,
    -3.65621623 ,-4.10702848, -2.74163508, -2.84631107, -3.18582317, -4.0487293,
    -1.12325745 ,-1.64093446 ,-4.02268007, -5.38007359, -0.26428226,  4.28725954,
    7.22055162  ,6.61766479 , 6.38679144,  7.88048646,  8.33104038,  9.3785814,
    5.13465995  ,6.69268938 , 7.58645762,  7.64948301, -2.79733528, -3.06823045,
    -2.57075348 ,-3.29893684 ,-2.84855775, -2.55440894, -2.77182915, -2.87041876,
    -2.99677273 ,-3.20843408 ,-2.46269995 ,-2.09790836 ,-2.51795478, -2.05741367,
    -0.29963753 ,-1.88456809 , 1.65468217 ,-2.41962186,  0.54455801,  5.26807822,
    5.13088927  ,6.24689403  ,6.51133444  ,5.17047804 , 1.37291851,  1.33924556,
    0.41818328 ,-0.79799421 ,-1.71526249, -1.59297148 ,-1.54010508, -3.48359835,
    -2.53845714 ,-3.41697828 ,-2.25332074, -3.02687194 ,-3.20367969, -2.79690055,
    -2.53646996 ,-2.95260502 ,-2.54692374, -3.23816223 ,-3.66049608, -4.11185321,
    -2.74479939 ,-2.84960824 ,-3.1895302,  -4.05340301 ,-1.12457089, -1.64283165,
    -4.02734407 ,-5.38634348 ,-0.26458672,  4.29224854 , 7.22896372,  6.62538486,
    6.39421595  ,7.88965819  ,8.34074556,  9.38953551  ,5.14064734,  6.70049297,
    7.59526551  ,7.65831236 ,-2.80050023 ,-3.07167137 ,-2.57364181, -3.30262036,
    -2.85174053, -2.55727798 ,-2.77492825 ,-2.87363848 ,-3.00013307, -3.21203975,
    -2.46543983 ,-2.10026867 ,-2.52077872, -2.05974619 ,-0.29995739, -1.88669163,
    1.65654003 ,-2.42235129  ,0.54515905  ,5.27396257  ,5.13665192,  6.25391576,
    6.51863851  ,5.17630194  ,1.37446318  ,1.34074652  ,0.41867197, -0.79888613,
    -1.71721205 ,-1.59475502, -1.54188172, -3.48751409, -2.54131966, -3.42080699,
    -2.25583537 ,-3.03023358 ,-3.20723688, -2.80004105 ,-2.53929516, -2.95594674,
    -2.549768   ,-3.24181284 ,-3.66462439, -4.11650736, -2.74785174, -2.85278873,
    -3.19310608 ,-4.05791125 ,-1.12583785, -1.64466175, -4.03184308, -5.39239153,
    -0.26488044  ,4.29706098 , 7.23707815,  6.6328317,   6.40137775,  7.89850518,
    8.35010731  ,9.40010206  ,5.14642285,  6.7080206,   7.60376154 , 7.66682935,
    -2.80359201 ,-3.07503267 ,-2.57646335, -3.30621867, -2.85484968, -2.56008062,
    -2.77795568 ,-2.87678376 ,-3.00341568, -3.21556205, -2.46811635, -2.10257433,
    -2.52353736 ,-2.06202472 ,-0.30026984, -1.88876606,  1.65835489, -2.42501765,
    0.54574615  ,5.27971083  ,5.14228152,  6.26077514,  6.52577373,  5.18199113,
    1.37597214  ,1.34221281  ,0.41914936, -0.79975743 ,-1.71911653, -1.59649723,
    -1.54361736 ,-3.49133924 ,-2.54411596, -3.42454716, -2.25829186, -3.03351751,
    -3.2107118  ,-2.8031089  ,-2.54205502, -2.95921116, -2.55254648 ,-3.24537905,
    -3.66865719 ,-4.12105402 ,-2.7508335,  -2.85589565, -3.19659928, -4.06231518,
    -1.12707551 ,-1.64644955 ,-4.03623807, -5.39829974, -0.26516738,  4.30176212,
    7.24500494  ,6.6401063   ,6.40837394,  7.90714743,  8.35925255,  9.41042432,
    5.15206481  ,6.71537428  ,7.61206095,  7.67514944, -1.26823939, -1.39085098,
    -1.16537196 ,-1.4953155  ,-1.29120906, -1.15797599, -1.25641887, -1.30120246,
    -1.35847083 ,-1.4544638  ,-1.11623997 ,-0.9510343,  -1.14136101, -0.93274864,
    -0.13570298 ,-0.85431631 , 0.75010153 ,-1.09687618,  0.24682508,  2.38790073,
    2.32583806  ,2.83178874  ,2.95158538 , 2.34391919,  0.62235697,  0.60705939,
    0.18965874 ,-0.36173321 ,-0.77768983 ,-0.72208616, -0.69845404, -1.57918337,
    -1.15077539, -1.5489096  ,-1.02137926 ,-1.37189625, -1.45202476, -1.26790123,
    -1.14967654, -1.33860002 ,-1.15446604, -1.46798747, -1.65946013, -1.8642032,
    -1.24410235 ,-1.29167473 ,-1.4458126  ,-1.83719999, -0.50980117, -0.74459311,
    -1.82544123, -2.44162426 ,-0.11986564 , 1.94571785,  3.27698324,  3.00345557,
    2.89847061,  3.5764109   ,3.78076138 , 4.25651333,  2.33034106 , 3.03741893,
    3.44281819,  3.47114336])
array_8_64 = np.array([[-2.77890778e+00,-3.04819345e+00,-2.55393577e+00,-3.27748728e+00,
                        -2.83002448e+00,-2.53770185e+00,-2.75378370e+00,-2.85167122e+00,
                        -2.97720551e+00,-3.18743992e+00,-2.44674611e+00,-2.08416390e+00,
                        -2.50151134e+00,-2.04383135e+00,-2.97774822e-01, -1.87220371e+00,
                        1.64386332e+00,-2.40373111e+00, 5.41056812e-01,  5.23381424e+00,
                        5.09734154e+00, 6.20600939e+00, 6.46880627e+00, 5.13656616e+00,
                        1.36392486e+00, 1.33050692e+00, 4.15338039e-01, -7.92800725e-01,
                        -1.70391083e+00,-1.58258414e+00,-1.52976286e+00,-3.46079755e+00,
                        -2.52178955e+00,-3.39468503e+00,-2.23867822e+00,-3.00729823e+00,
                        -3.18296623e+00,-2.77861333e+00,-2.52001882e+00,-2.93314719e+00,
                        -2.53036189e+00,-3.21690607e+00,-3.63645649e+00,-4.08475637e+00,
                        -2.72702599e+00,-2.83108854e+00,-3.16870952e+00,-4.02715015e+00,
                        -1.11719370e+00,-1.63217616e+00,-4.00114822e+00,-5.35112810e+00,
                        -2.62877196e-01,  4.26422596e+00, 7.18171549e+00, 6.58202362e+00,
                        6.35251474e+00, 7.83814001e+00, 8.28623390e+00, 9.32801151e+00,
                        5.10701752e+00, 6.65666533e+00, 7.54579067e+00, 7.60871983e+00],
    [ 1.18522085e-02,  1.27576580e-02,  1.10752573e-02,  1.39651960e-02,
    1.24685206e-02,  1.09247668e-02,  1.12880254e-02,  1.26568181e-02,
    1.40285911e-02,  1.39274877e-02,  9.78673715e-03,  8.31199344e-03,
    8.73556361e-03,  7.83888251e-03,  6.83376275e-04,  7.82417692e-03,
    -6.77347649e-03,  8.99901520e-03, -2.00780667e-03, -2.18946170e-02,
    -1.97243579e-02, -2.48874091e-02, -2.55768001e-02, -2.04127356e-02,
    -4.60212864e-03, -5.42518077e-03, -1.74555543e-03,  3.80660407e-03,
    5.96951181e-03,  7.46873301e-03,  6.08560629e-03,  1.45004783e-02,
    1.01040658e-02,  1.44411502e-02,  1.00328093e-02,  1.20532559e-02,
    1.29813552e-02,  1.26043651e-02,  1.06406091e-02,  1.14254197e-02,
    1.09526785e-02,  1.46216284e-02,  1.19820004e-02,  1.54941408e-02,
    1.15583632e-02,  1.30801136e-02,  1.30287549e-02,  1.67555325e-02,
    4.66001732e-03,  5.92946913e-03,  1.50042474e-02,  2.15185154e-02,
    4.30055195e-04, -1.81403887e-02, -2.99372524e-02, -2.73320191e-02,
    -2.66991984e-02, -3.19689028e-02, -3.33198644e-02, -3.74101847e-02,
    -2.14264225e-02, -2.69935112e-02, -2.82073654e-02, -3.34943570e-02],
    [-2.72188056e-03, -3.97874322e-03, -2.63568712e-03, -3.10585485e-03,
    -3.56427813e-03, -2.83615268e-03, -2.91770906e-03, -3.60369659e-03,
    -3.52776633e-03, -3.55103030e-03, -4.20643901e-03, -2.11794931e-03,
    -1.38751580e-03,  4.64928235e-05,  1.97521600e-04, -2.03506279e-04,
    2.17996887e-03,  3.22236650e-04,  1.57455553e-03,  6.14664936e-03,
    1.36353343e-03,  3.67625547e-03,  4.34469758e-03,  2.93653761e-03,
    4.04287770e-04,  2.18037691e-04, -9.63680563e-04, -1.57254399e-03,
    -1.34774391e-03, -1.82498794e-03, -9.78949247e-04, -3.33638093e-03,
    -1.78216631e-03, -3.33745172e-03, -2.98958272e-03, -3.77727067e-03,
    -4.15968802e-03, -3.62873101e-03, -2.99553666e-03, -1.58262439e-03,
    -3.09578818e-03, -2.95624346e-03, -3.54068982e-03, -4.33912314e-03,
    -4.84103616e-03, -4.18288261e-03, -2.55140220e-03, -5.41606219e-03,
    -4.42706572e-04, -6.36735524e-04, -1.20405504e-03, -1.73269771e-03,
    2.45236326e-03,  5.97388111e-03,  8.06927495e-03,  7.48907635e-03,
    6.78763632e-03,  1.01883570e-02,  2.21361965e-03,  8.07275530e-03,
    4.88083204e-03,  4.61599929e-03,  8.10634531e-03,  9.24064498e-03],
    [ 1.05132079e-02,  1.00809643e-02,  7.83890951e-03,  1.09307151e-02,
    1.02218548e-02,  1.10234832e-02,  7.77992327e-03,  1.06210569e-02,
    1.16063096e-02,  1.06725851e-02,  7.92907085e-03,  6.11002743e-03,
    3.63482698e-03,  2.89891637e-03, -1.87352241e-03,  2.75974721e-03,
    -6.80010347e-03,  2.49910331e-03, -5.00678737e-03, -1.44275827e-02,
    -5.53674530e-03, -1.28216743e-02, -1.44666880e-02, -1.30653819e-02,
    -1.48602622e-03, -1.40950712e-03,  1.59929413e-03,  3.60615063e-03,
    5.09426324e-03,  8.40349309e-03,  4.28701565e-03,  1.09967235e-02,
    6.56186929e-03,  9.49348975e-03,  7.46208150e-03,  7.92038254e-03,
    9.98447090e-03,  1.03020826e-02,  7.49601657e-03,  8.33277870e-03,
    8.18498433e-03,  8.77079554e-03,  1.38709657e-02,  9.40884743e-03,
    1.01276431e-02,  1.03201456e-02,  8.35519005e-03,  1.17530515e-02,
    2.09043687e-03,  4.76847927e-04,  5.19047352e-03,  7.65588041e-03,
    -4.37944895e-03, -1.49592543e-02, -2.25816779e-02, -2.37704795e-02,
    -1.83812249e-02, -2.24975180e-02, -6.39926037e-03, -2.20847502e-02,
    -1.45955635e-02, -1.55276069e-02, -2.31920872e-02, -2.30806936e-02],
    [ 2.88040806e-02,  3.17635089e-02,  2.66763065e-02,  3.76199521e-02,
    3.14900056e-02,  2.94174757e-02,  2.94604916e-02,  3.06061693e-02,
    3.31806056e-02,  3.33516821e-02,  2.49462500e-02,  2.21650302e-02,
    2.61690617e-02,  2.19744220e-02,  3.71268508e-03,  2.04587393e-02,
    -1.79387536e-02,  2.55789999e-02, -7.82375410e-03, -5.57621643e-02,
    -5.18762320e-02, -6.56514838e-02, -6.92378208e-02, -5.56568131e-02,
    -1.41305579e-02, -1.43421832e-02, -3.56138451e-03,  8.23517982e-03,
    1.67226102e-02,  1.98950991e-02,  1.24123637e-02,  3.72393429e-02,
    2.66215205e-02,  3.64336781e-02,  2.40320489e-02,  3.22027653e-02,
    3.56545337e-02,  2.94661615e-02,  2.78303307e-02,  3.09919100e-02,
    2.73040887e-02,  3.26421298e-02,  3.92666236e-02,  3.66416052e-02,
    2.87455320e-02,  3.05462219e-02,  3.42313834e-02,  4.38555330e-02,
    1.23267649e-02,  1.72114540e-02,  4.46472280e-02,  5.76500818e-02,
    4.40045493e-03, -4.43250090e-02, -7.52534345e-02, -7.02562183e-02,
    -6.74774125e-02, -8.03860202e-02, -8.83668587e-02, -9.51371342e-02,
    -5.39382026e-02, -7.02845901e-02, -8.39645490e-02, -8.44353512e-02],
    [-8.80418438e-03, -1.01402448e-02, -8.37257039e-03, -1.14719914e-02,
    -1.11892195e-02, -1.02150189e-02, -9.46232863e-03, -9.94388852e-03,
    -1.03053972e-02, -1.04023097e-02, -8.42848793e-03, -8.18570983e-03,
    -9.35692713e-03, -8.49035289e-03, -2.59807915e-03, -7.42785959e-03,
    6.03811909e-03, -8.39673355e-03,  5.71953598e-03,  2.03853324e-02,
    1.77741628e-02,  2.25225985e-02,  2.36342903e-02,  1.79145597e-02,
    5.19801769e-03,  5.22442255e-03,  1.33161328e-03, -2.75251642e-03,
    -4.56092693e-03, -5.01061510e-03, -3.05359252e-03, -1.15756122e-02,
    -8.76166578e-03, -1.26676336e-02, -8.59263632e-03, -1.13141872e-02,
    -1.17047299e-02, -1.03009511e-02, -9.40834079e-03, -9.97967180e-03,
    -8.79021268e-03, -1.00037483e-02, -1.10632200e-02, -1.21088391e-02,
    -9.78299323e-03, -1.12965405e-02, -1.19670471e-02, -1.59882829e-02,
    -5.90887526e-03, -7.50638451e-03, -1.77276339e-02, -2.14714035e-02,
    -2.55307974e-03,  1.46661596e-02,  2.43000407e-02,  2.28463616e-02,
    2.22752821e-02,  2.81144530e-02,  3.23296897e-02,  3.30939032e-02,
    1.83625519e-02,  2.43754592e-02,  3.02225761e-02,  3.15423682e-02],
    [ 8.99412390e-03,  1.18044075e-02,  9.10169166e-03,  1.17415581e-02,
    9.83892009e-03,  8.15431029e-03,  9.65375546e-03,  9.67444479e-03,
    1.08329542e-02,  1.10975094e-02,  8.34958255e-03,  7.86340237e-03,
    8.78318585e-03,  8.33466649e-03,  8.46078794e-04,  7.07656145e-03,
    -5.96238626e-03,  8.46100599e-03,  8.87674978e-04, -1.82889961e-02,
    -1.51410513e-02, -2.24204753e-02, -2.17756610e-02, -1.86596625e-02,
    -4.64822119e-03, -4.48701903e-03, -2.74188095e-03,  2.45428714e-03,
    5.98727074e-03,  6.83898386e-03,  4.37904336e-03,  1.26873981e-02,
    9.36974306e-03,  1.17783211e-02,  7.75075331e-03,  9.40954499e-03,
    1.08015891e-02,  9.99062136e-03,  8.50913674e-03,  1.04106013e-02,
    8.91693588e-03,  1.24434941e-02,  1.13806073e-02,  1.28714852e-02,
    8.83503631e-03,  9.61072370e-03,  1.00705205e-02,  1.52429044e-02,
    3.00087314e-03,  4.88657318e-03,  1.29940389e-02,  2.00872570e-02,
    1.58049306e-03, -1.46988109e-02, -2.50729583e-02, -2.22478285e-02,
    -2.24545747e-02, -3.17517594e-02, -3.26030813e-02, -3.22973542e-02,
    -1.79783478e-02, -2.02932153e-02, -2.47636549e-02, -2.39038318e-02],
    [-1.14799906e-02, -1.14101823e-02, -1.00101773e-02, -1.23928990e-02,
    -1.04825199e-02, -9.92031582e-03, -1.09113492e-02, -1.07890815e-02,
    -1.03862956e-02, -1.25332978e-02, -9.91656072e-03, -8.36590026e-03,
    -1.03592649e-02, -7.94377364e-03, -1.33453030e-03, -6.74642064e-03,
    6.62907120e-03, -8.74186121e-03,  4.68878727e-03,  2.04268061e-02,
    2.12005656e-02,  2.34382339e-02,  2.52724290e-02,  1.95771791e-02,
    5.07604890e-03,  4.92055528e-03,  7.49951694e-04, -3.08128819e-03,
    -6.94656279e-03, -5.22983074e-03, -6.72055129e-03, -1.30561870e-02,
    -9.69728362e-03, -1.29465722e-02, -8.85305647e-03, -1.25717446e-02,
    -1.16831567e-02, -1.07349064e-02, -9.43107996e-03, -1.20572727e-02,
    -9.83262900e-03, -1.16446093e-02, -1.61658414e-02, -1.77509449e-02,
    -1.10601969e-02, -1.12483203e-02, -1.32389348e-02, -1.53003447e-02,
    -5.00199618e-03, -7.04393815e-03, -1.58858821e-02, -1.92734301e-02,
    5.03649935e-05,  1.70179363e-02,  2.83496752e-02,  2.69450471e-02,
    2.42976844e-02,  2.87441835e-02,  2.84337215e-02,  3.68441306e-02,
    1.97438281e-02,  2.65428759e-02,  3.05629522e-02,  3.01316790e-02]])


tolerance = 1e-1

# Function to compute mean squared error (MSE)
def mse(arr1, arr2):
    return np.mean((arr1 - arr2) ** 2)

# Check default flattening orders (C and F)
def check_flatten_orders():
    best_order = None
    best_error = float('inf')
    
    for order in ['C', 'F']:
        array_flat = array_8_64.flatten(order=order)
        error = mse(array_512, array_flat)
        if error < best_error:
            best_error = error
            best_order = order
    return best_order, best_error

# Check all permutations of the axes (0, 1)
def check_permutations():
    best_perm = None
    best_error = float('inf')
    
    for perm in permutations(range(2)):  # Permute axes (0, 1)
        permuted_array = np.transpose(array_8_64, perm).flatten()
        error = mse(array_512, permuted_array)
        if error < best_error:
            best_error = error
            best_perm = perm
    return best_perm, best_error

# Check reshaping into other dimensions and flatten
def check_reshapes():
    best_reshape = None
    best_error = float('inf')
    
    for new_shape in [(64, 8), (16, 32), (32, 16)]:
        reshaped_array = np.reshape(array_8_64, new_shape).flatten()
        error = mse(array_512, reshaped_array)
        if error < best_error:
            best_error = error
            best_reshape = new_shape
    return best_reshape, best_error

# Run all checks and return the best option
def find_best_order():
    best_match = None
    best_error = float('inf')
    
    # Flatten orders (C and F)
    flatten_order, flatten_error = check_flatten_orders()
    print(flatten_error)
    if flatten_error < best_error:
        best_match = ('flatten', flatten_order)
        best_error = flatten_error
    
    # Axis permutations
    print(flatten_error)
    perm_order, perm_error = check_permutations()
    if perm_error < best_error:
        best_match = ('permute', perm_order)
        best_error = perm_error
    
    # Reshaping
    print(flatten_error)
    reshape_order, reshape_error = check_reshapes()
    if reshape_error < best_error:
        best_match = ('reshape', reshape_order)
        best_error = reshape_error
    
    print(flatten_error)
    return best_match, best_error

# Find and print the best arrangement
best_match, best_error = find_best_order()
print(f"Best arrangement: {best_match} with error: {best_error}")
