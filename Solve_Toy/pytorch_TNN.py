import torch
from extract_from_pretrained import get_pytorch_learned_parameters, get_pytorch_intermediate_values
import transformer_b as TNN
import pyomo.environ as pyo
from omlt import OmltBlock
import convert_pyomo
from gurobipy import Model, GRB, GurobiError
from print_stats import solve_gurobipy

# create model
transformer_model = torch.nn.Transformer(d_model= 6, nhead=2, num_encoder_layers=1, num_decoder_layers=1,dim_feedforward=10, batch_first=True)
src = torch.tensor([[[4.7372, 3.1233, 7.3197, 3.6181, 9.8899, 8.6935], 
         [6.9097, 9.1715, 0.9540, 2.6137, 6.8450, 3.0610], 
         [1.0507, 2.0849, 1.4201, 7.8277, 7.6262, 5.9933], 
         [8.6112, 5.4909, 8.3721, 8.5031, 1.7485, 0.6197], 
         [7.8085, 8.2331, 7.8705, 6.1721, 0.5948, 4.4750], 
         [4.3085, 2.8331, 0.4507, 6.7883, 8.1642, 1.4257], 
         [3.2477, 6.1286, 3.1990, 3.0188, 7.3703, 2.0809], 
         [3.1456, 5.5112, 7.2626, 6.6343, 9.1417, 9.6282], 
         [7.9228, 7.7406, 2.8963, 9.5929, 0.2886, 1.8700], 
         [2.9622, 8.6711, 6.5249, 8.1662, 7.7103, 4.1847]],

        [[2.5536, 6.0966, 8.3337, 7.3776, 3.9209, 7.3974], 
         [7.7043, 0.8212, 9.0718, 9.9305, 3.6880, 1.2521], 
         [0.0229, 5.7430, 4.7736, 6.1484, 0.9162, 4.1025],
         [9.2844, 9.1851, 1.8996, 0.7580, 3.4919, 0.5858],
         [6.7783, 1.9887, 6.2172, 5.6627, 3.7532, 3.6587],
         [5.2608, 0.2811, 9.1171, 5.0690, 8.4872, 6.2769],
         [6.0612, 4.5212, 8.9425, 4.0098, 4.8107, 9.6995],
         [0.1404, 1.0400, 8.0618, 3.0541, 2.6222, 4.8619],
         [1.4983, 9.4557, 1.5524, 9.8865, 1.8044, 9.9122],
         [9.1277, 4.7749, 2.1360, 2.1548, 6.1895, 9.8931]],

        [[1.0519, 6.0942, 3.4786, 7.4973, 4.7342, 7.7219],
         [8.9836, 6.5590, 3.3544, 9.5452, 9.4822, 1.4969],
         [2.2553, 8.3939, 5.2208, 7.4808, 7.2274, 3.4440],
         [3.8550, 8.5243, 7.3602, 3.5222, 2.0634, 6.0526],
         [2.5187, 1.4141, 2.7136, 1.3187, 6.8691, 5.5543],
         [7.4732, 8.2179, 6.1715, 2.8460, 0.5131, 3.9661],
         [1.9445, 8.0722, 5.7832, 7.9291, 1.2264, 1.4281],
         [4.7220, 5.7067, 1.9878, 6.8539, 6.0268, 2.7270],
         [9.0797, 2.3068, 3.9416, 3.8073, 4.0206, 4.9138],
         [1.0989, 5.0432, 3.2367, 9.7060, 0.1302, 2.9613]],

        [[5.3461, 0.7227, 7.4733, 3.7959, 7.2337, 0.6170],
         [0.3780, 9.6257, 9.8704, 7.2782, 3.4089, 2.6949],
         [3.0263, 8.3392, 5.5383, 7.0677, 0.1780, 3.4702],
         [0.4720, 2.0339, 9.4542, 3.1989, 1.3045, 3.4206],
         [2.1607, 6.4367, 2.3055, 2.0549, 2.0970, 6.3561],
         [8.2415, 7.0932, 1.3764, 0.9321, 3.4892, 4.1114],
         [2.1949, 7.8258, 8.0452, 8.8006, 6.7284, 3.8014],
         [0.6176, 3.6255, 3.2445, 1.6055, 9.4902, 9.4897],
         [6.9205, 0.4422, 8.6601, 9.9409, 7.5298, 4.2865],
         [8.3295, 4.2578, 8.6715, 0.7508, 5.1382, 7.9141]],

        [[7.6996, 1.4896, 1.7808, 0.1970, 1.8261, 2.8152],
         [0.1308, 7.4859, 7.6798, 9.1644, 4.9394, 4.7803],
         [3.6240, 6.8267, 6.6056, 2.8877, 0.1845, 5.5856],
         [1.5827, 6.9139, 6.4820, 1.4659, 9.7311, 5.6010],
         [4.1286, 1.5014, 6.5952, 6.5958, 6.5423, 7.6770],
         [6.9508, 4.6221, 3.2650, 1.5151, 4.0193, 7.6419],
         [5.2442, 0.5299, 2.6601, 0.6515, 4.9443, 3.6147],
         [5.9874, 0.6233, 3.3328, 4.6203, 6.6684, 4.6660],
         [6.1954, 4.8382, 9.1885, 9.1831, 8.5189, 1.2698],
         [7.2600, 5.6567, 4.1186, 5.0606, 1.4178, 9.6987]]])
tgt = torch.tensor([[ 
         [1.0507, 2.0849, 1.4201, 7.8277, 7.6262, 5.9933], 
         [8.6112, 5.4909, 8.3721, 8.5031, 1.7485, 0.6197], 
         [7.8085, 8.2331, 7.8705, 6.1721, 0.5948, 4.4750], 
         [4.3085, 2.8331, 0.4507, 6.7883, 8.1642, 1.4257], 
         [3.2477, 6.1286, 3.1990, 3.0188, 7.3703, 2.0809], 
         [3.1456, 5.5112, 7.2626, 6.6343, 9.1417, 9.6282], 
         [7.9228, 7.7406, 2.8963, 9.5929, 0.2886, 1.8700], 
         [2.9622, 8.6711, 6.5249, 8.1662, 7.7103, 4.1847],
         [4.7372, 3.1233, 7.3197, 3.6181, 9.8899, 8.6935], 
         [6.9097, 9.1715, 0.9540, 2.6137, 6.8450, 3.0610]],

        [ 
         [0.0229, 5.7430, 4.7736, 6.1484, 0.9162, 4.1025],
         [9.2844, 9.1851, 1.8996, 0.7580, 3.4919, 0.5858],
         [6.7783, 1.9887, 6.2172, 5.6627, 3.7532, 3.6587],
         [5.2608, 0.2811, 9.1171, 5.0690, 8.4872, 6.2769],
         [6.0612, 4.5212, 8.9425, 4.0098, 4.8107, 9.6995],
         [0.1404, 1.0400, 8.0618, 3.0541, 2.6222, 4.8619],
         [1.4983, 9.4557, 1.5524, 9.8865, 1.8044, 9.9122],
         [9.1277, 4.7749, 2.1360, 2.1548, 6.1895, 9.8931],
         [2.5536, 6.0966, 8.3337, 7.3776, 3.9209, 7.3974], 
         [7.7043, 0.8212, 9.0718, 9.9305, 3.6880, 1.2521]],

        [
         [2.2553, 8.3939, 5.2208, 7.4808, 7.2274, 3.4440],
         [3.8550, 8.5243, 7.3602, 3.5222, 2.0634, 6.0526],
         [2.5187, 1.4141, 2.7136, 1.3187, 6.8691, 5.5543],
         [7.4732, 8.2179, 6.1715, 2.8460, 0.5131, 3.9661],
         [1.9445, 8.0722, 5.7832, 7.9291, 1.2264, 1.4281],
         [4.7220, 5.7067, 1.9878, 6.8539, 6.0268, 2.7270],
         [9.0797, 2.3068, 3.9416, 3.8073, 4.0206, 4.9138],
         [1.0989, 5.0432, 3.2367, 9.7060, 0.1302, 2.9613],
         [1.0519, 6.0942, 3.4786, 7.4973, 4.7342, 7.7219],
         [8.9836, 6.5590, 3.3544, 9.5452, 9.4822, 1.4969]],

        [
         [3.0263, 8.3392, 5.5383, 7.0677, 0.1780, 3.4702],
         [0.4720, 2.0339, 9.4542, 3.1989, 1.3045, 3.4206],
         [2.1607, 6.4367, 2.3055, 2.0549, 2.0970, 6.3561],
         [8.2415, 7.0932, 1.3764, 0.9321, 3.4892, 4.1114],
         [2.1949, 7.8258, 8.0452, 8.8006, 6.7284, 3.8014],
         [0.6176, 3.6255, 3.2445, 1.6055, 9.4902, 9.4897],
         [6.9205, 0.4422, 8.6601, 9.9409, 7.5298, 4.2865],
         [8.3295, 4.2578, 8.6715, 0.7508, 5.1382, 7.9141],
         [5.3461, 0.7227, 7.4733, 3.7959, 7.2337, 0.6170],
         [0.3780, 9.6257, 9.8704, 7.2782, 3.4089, 2.6949],],

        [
         [3.6240, 6.8267, 6.6056, 2.8877, 0.1845, 5.5856],
         [1.5827, 6.9139, 6.4820, 1.4659, 9.7311, 5.6010],
         [4.1286, 1.5014, 6.5952, 6.5958, 6.5423, 7.6770],
         [6.9508, 4.6221, 3.2650, 1.5151, 4.0193, 7.6419],
         [5.2442, 0.5299, 2.6601, 0.6515, 4.9443, 3.6147],
         [5.9874, 0.6233, 3.3328, 4.6203, 6.6684, 4.6660],
         [6.1954, 4.8382, 9.1885, 9.1831, 8.5189, 1.2698],
         [7.2600, 5.6567, 4.1186, 5.0606, 1.4178, 9.6987],
         [7.6996, 1.4896, 1.7808, 0.1970, 1.8261, 2.8152],
         [0.1308, 7.4859, 7.6798, 9.1644, 4.9394, 4.7803]]])
out = transformer_model(src, tgt) #src: input to encoder, tgt: input to decoder
# print(out)
# #save model
model_path = ".\\pytorch_model.pt"
torch.save(transformer_model.state_dict(), model_path)

# load model
device = torch.device('cpu')
model = torch.nn.Transformer(d_model= 6, nhead=2, num_encoder_layers=1, num_decoder_layers=1,dim_feedforward=10, batch_first=True)
model.load_state_dict(torch.load(model_path, map_location=device))
out_pre_trained = model(src, tgt)

# print("---------")
# print(out)

# Get learned parameters
#layer_names, dict_transformer_params, model = get_pytorch_learned_parameters(model, input_shape= (5, 10, 4), head_size=2)
#print(dict_transformer_params)

# Get intermediate outputs of model for testing
sample_input = src[0]
sample_input2 = tgt[0]
sample_input2[-1:] = torch.tensor([0, 0, 0, 0, 0, 0])

intermediate_outputs = get_pytorch_intermediate_values(model, sample_input, sample_input2)

# Create transformer 
opt_model = pyo.ConcreteModel(name="opt_model_name")
transformer = TNN.Transformer( ".\\data\\toy_config_pytorch.json", opt_model) 
result =  transformer.build_from_pytorch( model, sample_input, sample_input2, enc_bounds = (0,10), dec_bounds=(0,10))
print(result)

## Set objective
tnn_output = getattr( opt_model, result[-2])
opt_model.obj = pyo.Objective( expr= sum(tnn_output[i] for i in tnn_output.index_set()), sense=1) 

opt_model.input_var_constraints = pyo.ConstraintList()
opt_model.dec_time_dims.last()
for d in opt_model.input_dims:
    opt_model.input_var_constraints.add(expr=opt_model.dec_input_param[d, opt_model.dec_time_dims.last()] == tnn_output[d])
    
## Convert to gurobipy
gurobi_model, map_var = convert_pyomo.to_gurobi(opt_model)

## Solve
time_limit = 240
solve_gurobipy(gurobi_model, time_limit) ## Solve and print


if gurobi_model.status == GRB.INFEASIBLE:
        gurobi_model.computeIIS()
        gurobi_model.write("pytorch_model.ilp")